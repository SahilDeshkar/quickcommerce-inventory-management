{"version":3,"sources":["App.jsx","index.js"],"names":["App","files","setFiles","useState","inventoryData","setInventoryData","totalProducts","lowStock","ordersToday","revenue","recommendations","cartItems","isDataLoaded","setIsDataLoaded","importStatus","setImportStatus","message","isError","isProcessing","setIsProcessing","showSuccessAnimation","setShowSuccessAnimation","fileInputRef","useRef","formatFileSize","bytes","i","Math","floor","log","parseFloat","pow","toFixed","updateCartItemQuantity","index","change","updatedCart","quantity","max","getStockClassName","stock","_jsxs","children","_jsx","className","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","type","ref","accept","multiple","onChange","event","fileObjects","Array","from","target","map","file","name","size","onClick","handleFileButtonClick","current","click","length","updatedFiles","splice","removeFile","processCSVImport","async","products","orders","fileObj","text","result","Papa","parse","header","skipEmptyLines","data","console","warn","headerStr","meta","fields","join","toLowerCase","includes","productName","product","firstRow","Object","keys","some","key","Error","getStockValue","stockFields","field","value","parseInt","isNaN","allFields","entries","random","filter","p","reduce","sum","order","possibleFields","rawValue","cleanValue","String","replace","amount","sort","a","b","slice","prod","nameFields","trim","getName","category","categoryFields","getCategory","supplier","supplierFields","getSupplier","topItems","rec","price","priceFields","title","item","setTimeout","error","processFiles","disabled","_Fragment","style","width","min","existingItem","find","push","addToCart","colSpan","removeCartItem","total","handleProcessOrder","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3c661f8.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\n\nconst App = () => {\n  const [files, setFiles] = useState([]);\n  const [inventoryData, setInventoryData] = useState({\n    totalProducts: 0,\n    lowStock: 0,\n    ordersToday: 0,\n    revenue: 0,\n    recommendations: [],\n    cartItems: []\n  });\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n  const [importStatus, setImportStatus] = useState({\n    message: 'Ready to import data.',\n    isError: false\n  });\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showSuccessAnimation, setShowSuccessAnimation] = useState(false);\n  const fileInputRef = useRef(null);\n\n  const handleFileChange = (event) => {\n    const selectedFiles = Array.from(event.target.files);\n    const fileObjects = selectedFiles.map(file => ({\n      name: file.name,\n      size: formatFileSize(file.size),\n      file: file\n    }));\n    setFiles([...files, ...fileObjects]);\n  };\n\n  const removeFile = (index) => {\n    const updatedFiles = [...files];\n    updatedFiles.splice(index, 1);\n    setFiles(updatedFiles);\n    \n    // If all files are removed, reset the dashboard\n    if (updatedFiles.length === 0) {\n      setIsDataLoaded(false);\n      setInventoryData({\n        totalProducts: 0,\n        lowStock: 0,\n        ordersToday: 0,\n        revenue: 0,\n        recommendations: [],\n        cartItems: []\n      });\n      setImportStatus({\n        message: 'Ready to import data.',\n        isError: false\n      });\n    }\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const processCSVImport = () => {\n    if (files.length === 0) return;\n    \n    // Update status to processing\n    setIsProcessing(true);\n    setImportStatus({\n      message: 'Processing data...',\n      isError: false\n    });\n    \n    const processFiles = async () => {\n      try {\n        let products = [];\n        let orders = [];\n        \n        for (const fileObj of files) {\n          const file = fileObj.file;\n          const text = await file.text();\n          \n          const result = Papa.parse(text, {\n            header: true,\n            skipEmptyLines: true\n          });\n          \n          if (!result.data || result.data.length === 0) {\n            console.warn(`No data found in ${file.name}`);\n            continue;\n          }\n          \n          const headers = result.meta.fields || [];\n          const headerStr = headers.join(',').toLowerCase();\n          \n          if (\n            headerStr.includes('product') || \n            headerStr.includes('stock') || \n            headerStr.includes('inventory') || \n            headerStr.includes('quantity') ||\n            headerStr.includes('sku') ||\n            headerStr.includes('item')\n          ) {\n            products = [...products, ...result.data];\n          } \n          else if (\n            headerStr.includes('order') || \n            headerStr.includes('amount') ||\n            headerStr.includes('sale') ||\n            headerStr.includes('transaction') ||\n            headerStr.includes('revenue')\n          ) {\n            orders = [...orders, ...result.data];\n          } else {\n            if (\n              headerStr.includes('price') || \n              headerStr.includes('cost') ||\n              result.data[0] && (result.data[0].name || result.data[0].productName || result.data[0].product)\n            ) {\n              products = [...products, ...result.data];\n            } else if (\n              headerStr.includes('date') || \n              headerStr.includes('customer') ||\n              headerStr.includes('payment')\n            ) {\n              orders = [...orders, ...result.data];\n            } else {\n              const firstRow = result.data[0] || {};\n              const firstRowKeys = Object.keys(firstRow);\n              \n              if (\n                firstRowKeys.some(key => \n                  key.toLowerCase().includes('name') || \n                  key.toLowerCase().includes('product') ||\n                  key.toLowerCase().includes('stock')\n                )\n              ) {\n                products = [...products, ...result.data];\n              } else {\n                products = [...products, ...result.data];\n              }\n            }\n          }\n        }\n        \n        if (products.length === 0 && orders.length === 0) {\n          throw new Error('No valid product or order data found in the uploaded files');\n        }\n        \n        const totalProducts = products.length;\n        \n        const getStockValue = (product) => {\n          const stockFields = ['stock', 'inventory', 'quantity', 'qty', 'on_hand', 'on hand', 'available'];\n          for (const field of stockFields) {\n            if (product[field] !== undefined && product[field] !== '') {\n              const value = parseInt(product[field]);\n              if (!isNaN(value)) return value;\n            }\n          }\n          \n          const allFields = Object.entries(product);\n          for (const [key, value] of allFields) {\n            if (!isNaN(parseInt(value)) && \n                !key.toLowerCase().includes('price') && \n                !key.toLowerCase().includes('cost') && \n                !key.toLowerCase().includes('id')) {\n              return parseInt(value);\n            }\n          }\n          \n          return Math.floor(Math.random() * 30) + 1;\n        };\n        \n        const lowStock = products.filter(p => {\n          const stockValue = getStockValue(p);\n          return stockValue < 10;\n        }).length;\n        \n        const revenue = orders.reduce((sum, order) => {\n          const possibleFields = ['amount', 'total', 'price', 'revenue', 'sale', 'value', 'sum', 'payment'];\n          for (const field of possibleFields) {\n            const rawValue = order[field];\n            if (rawValue !== undefined && rawValue !== '') {\n              const cleanValue = String(rawValue).replace(/[$,]/g, '');\n              const amount = parseFloat(cleanValue);\n              if (!isNaN(amount)) return sum + amount;\n            }\n          }\n          return sum;\n        }, 0);\n        \n        const recommendations = products\n          .filter(p => {\n            const stockValue = getStockValue(p);\n            return stockValue < 20;\n          })\n          .sort((a, b) => {\n            const stockA = getStockValue(a);\n            const stockB = getStockValue(b);\n            return stockA - stockB;\n          })\n          .slice(0, 5)\n          .map(p => {\n            const getName = (prod) => {\n              const nameFields = ['productName', 'name', 'product', 'title', 'item', 'description'];\n              for (const field of nameFields) {\n                if (prod[field] && String(prod[field]).trim() !== '') {\n                  return String(prod[field]);\n                }\n              }\n              return 'Unknown Product';\n            };\n            \n            const getCategory = (prod) => {\n              const categoryFields = ['category', 'type', 'group', 'department', 'section', 'class'];\n              for (const field of categoryFields) {\n                if (prod[field] && String(prod[field]).trim() !== '') {\n                  return String(prod[field]);\n                }\n              }\n              return 'Uncategorized';\n            };\n            \n            const getSupplier = (prod) => {\n              const supplierFields = ['supplier', 'vendor', 'manufacturer', 'source', 'company', 'provider'];\n              for (const field of supplierFields) {\n                if (prod[field] && String(prod[field]).trim() !== '') {\n                  return String(prod[field]);\n                }\n              }\n              return 'Unknown Supplier';\n            };\n            \n            return {\n              name: getName(p),\n              category: getCategory(p),\n              stock: getStockValue(p),\n              supplier: getSupplier(p)\n            };\n          });\n        \n        const topItems = recommendations.length > 0 \n          ? recommendations.slice(0, 2).map(rec => ({\n              name: rec.name,\n              price: 19.99,\n              quantity: 1\n            }))\n          : products\n              .sort(() => 0.5 - Math.random())\n              .slice(0, 2)\n              .map(p => {\n                const priceFields = ['price', 'cost', 'msrp', 'retail_price', 'value'];\n                let price = 19.99;\n                for (const field of priceFields) {\n                  if (p[field] !== undefined && p[field] !== '') {\n                    const cleanValue = String(p[field]).replace(/[$,]/g, '');\n                    const amount = parseFloat(cleanValue);\n                    if (!isNaN(amount)) {\n                      price = amount;\n                      break;\n                    }\n                  }\n                }\n                \n                return {\n                  name: p.productName || p.name || p.product || p.title || p.item || 'Unknown Product',\n                  price,\n                  quantity: 1\n                };\n              });\n        \n        // Simulate loading with a delay for better UX\n        setTimeout(() => {\n          setInventoryData({\n            totalProducts,\n            lowStock,\n            ordersToday: orders.length,\n            revenue,\n            recommendations,\n            cartItems: topItems\n          });\n          \n          setIsDataLoaded(true);\n          setIsProcessing(false);\n          setShowSuccessAnimation(true);\n          \n          setTimeout(() => {\n            setShowSuccessAnimation(false);\n          }, 2000);\n          \n          setImportStatus({\n            message: 'Data imported successfully! Dashboard updated with CSV data.',\n            isError: false\n          });\n        }, 1500);\n      } catch (error) {\n        console.error('Error processing CSV files:', error);\n        setIsDataLoaded(false);\n        setIsProcessing(false);\n        setImportStatus({\n          message: `Error importing data: ${error.message}`,\n          isError: true\n        });\n      }\n    };\n    \n    processFiles();\n  };\n\n  const addToCart = (product) => {\n    const updatedCart = [...inventoryData.cartItems];\n    const existingItem = updatedCart.find(item => item.name === product.name);\n    \n    if (existingItem) {\n      existingItem.quantity += 1;\n    } else {\n      updatedCart.push({\n        name: product.name,\n        price: product.price || 19.99,\n        quantity: 1\n      });\n    }\n    \n    setInventoryData({\n      ...inventoryData,\n      cartItems: updatedCart\n    });\n  };\n  \n  const updateCartItemQuantity = (index, change) => {\n    const updatedCart = [...inventoryData.cartItems];\n    updatedCart[index].quantity = Math.max(1, updatedCart[index].quantity + change);\n    \n    setInventoryData({\n      ...inventoryData,\n      cartItems: updatedCart\n    });\n  };\n  \n  const removeCartItem = (index) => {\n    const updatedCart = [...inventoryData.cartItems];\n    updatedCart.splice(index, 1);\n    \n    setInventoryData({\n      ...inventoryData,\n      cartItems: updatedCart\n    });\n  };\n  \n  const getStockClassName = (stock) => {\n    if (stock === 0) return 'out-of-stock';\n    if (stock < 10) return 'low-stock';\n    return 'medium-stock';\n  };\n  \n  const calculateCartTotal = () => {\n    return inventoryData.cartItems.reduce(\n      (total, item) => total + (item.price * item.quantity), \n      0\n    ).toFixed(2);\n  };\n\n  const handleProcessOrder = () => {\n    // Simulate order processing\n    setIsProcessing(true);\n    setTimeout(() => {\n      setIsProcessing(false);\n      setInventoryData({\n        ...inventoryData,\n        cartItems: []\n      });\n      setShowSuccessAnimation(true);\n      setTimeout(() => {\n        setShowSuccessAnimation(false);\n      }, 2000);\n    }, 1500);\n  };\n\n  const handleFileButtonClick = () => {\n    fileInputRef.current.click();\n  };\n\n  return (\n    <div>\n      {showSuccessAnimation && (\n        <div className=\"success-animation-overlay\">\n          <div className=\"success-animation-circle\">\n            <i className=\"fas fa-check\"></i>\n          </div>\n        </div>\n      )}\n      \n      <header>\n        <div className=\"logo\">\n          <i className=\"fas fa-sync-alt logo-icon\"></i>\n          <h1>InventoryPro</h1>\n        </div>\n        <p className=\"tagline\">Smart inventory management for your business</p>\n      </header>\n      \n      <div className=\"container\">\n        <div className=\"dashboard-overview\">\n          <div className=\"section-header\">\n            <i className=\"fas fa-chart-line\"></i>\n            <h2>Dashboard Overview</h2>\n          </div>\n          \n          <div className=\"stats-container\">\n            <div className=\"stat-card\">\n              <div className=\"stat-icon-container blue\">\n                <i className=\"fas fa-box\"></i>\n              </div>\n              <div className=\"stat-info\">\n                <h3>Total Products</h3>\n                <div className=\"stat-value\">{isDataLoaded ? inventoryData.totalProducts.toLocaleString() : '0'}</div>\n              </div>\n              <div className=\"stat-indicator blue\"></div>\n            </div>\n            \n            <div className=\"stat-card\">\n              <div className=\"stat-icon-container amber\">\n                <i className=\"fas fa-exclamation-triangle\"></i>\n              </div>\n              <div className=\"stat-info\">\n                <h3>Low Stock</h3>\n                <div className=\"stat-value\">{isDataLoaded ? inventoryData.lowStock : '0'}</div>\n              </div>\n              <div className=\"stat-indicator amber\"></div>\n            </div>\n            \n            <div className=\"stat-card\">\n              <div className=\"stat-icon-container purple\">\n                <i className=\"fas fa-shopping-cart\"></i>\n              </div>\n              <div className=\"stat-info\">\n                <h3>Orders Today</h3>\n                <div className=\"stat-value\">{isDataLoaded ? inventoryData.ordersToday : '0'}</div>\n              </div>\n              <div className=\"stat-indicator purple\"></div>\n            </div>\n            \n            <div className=\"stat-card\">\n              <div className=\"stat-icon-container green\">\n                <i className=\"fas fa-dollar-sign\"></i>\n              </div>\n              <div className=\"stat-info\">\n                <h3>Revenue</h3>\n                <div className=\"stat-value\">{isDataLoaded ? `$${inventoryData.revenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}` : '$0.00'}</div>\n              </div>\n              <div className=\"stat-indicator green\"></div>\n            </div>\n          </div>\n          \n          <div className=\"card import-card\">\n            <div className=\"import-header\">\n              <div className=\"import-title\">\n                <div className=\"import-icon-container\">\n                  <i className=\"fas fa-file-import\"></i>\n                </div>\n                <div>\n                  <h3>Import Inventory</h3>\n                  <p>Upload CSV files to update your inventory data</p>\n                </div>\n              </div>\n              <div>\n                <input \n                  type=\"file\" \n                  ref={fileInputRef}\n                  accept=\".csv\" \n                  multiple \n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                />\n                <button \n                  className=\"btn btn-primary btn-with-icon\"\n                  onClick={handleFileButtonClick}\n                >\n                  <i className=\"fas fa-cloud-upload-alt\"></i>\n                  Select CSV\n                </button>\n              </div>\n            </div>\n            \n            {files.length > 0 && (\n              <div className=\"file-list-container\">\n                {files.map((file, index) => (\n                  <div className=\"file-item\" key={index}>\n                    <div className=\"file-info\">\n                      <div className=\"file-icon-container\">\n                        <i className=\"fas fa-file-csv\"></i>\n                      </div>\n                      <div>\n                        <p className=\"file-name\">{file.name}</p>\n                        <p className=\"file-size\">{file.size}</p>\n                      </div>\n                    </div>\n                    <button \n                      className=\"btn-icon btn-danger\" \n                      onClick={() => removeFile(index)}\n                    >\n                      <i className=\"fas fa-times\"></i>\n                    </button>\n                  </div>\n                ))}\n                \n                <div className=\"import-actions\">\n                  <button \n                    className=\"btn btn-primary btn-with-icon\"\n                    onClick={processCSVImport}\n                    disabled={isProcessing}\n                  >\n                    {isProcessing ? (\n                      <>\n                        <div className=\"spinner\"></div>\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-file-import\"></i>\n                        Process CSV Import\n                      </>\n                    )}\n                  </button>\n                </div>\n              </div>\n            )}\n            \n            <div className={`notification ${importStatus.isError ? 'error' : 'success'}`}>\n              <i className={`fas fa-${importStatus.isError ? 'exclamation-circle' : 'info-circle'}`}></i>\n              <div>\n                <strong>{importStatus.isError ? 'Error!' : (isDataLoaded ? 'Success!' : 'Ready to import')}</strong>\n                <p>{importStatus.message}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"main-content\">\n          <div className=\"left-column\">\n            <div className=\"section-header\">\n              <i className=\"fas fa-sync-alt\"></i>\n              <h2>Recommended Restocking</h2>\n            </div>\n            \n            <div className=\"card\">\n              <div className=\"recommendations-list\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Product</th>\n                      <th>Category</th>\n                      <th>Stock</th>\n                      <th>Supplier</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {isDataLoaded ? (\n                      inventoryData.recommendations.length > 0 ? (\n                        inventoryData.recommendations.map((item, index) => (\n                          <tr key={index}>\n                            <td className=\"product-name\">{item.name}</td>\n                            <td>\n                              <span className=\"category-badge\">{item.category}</span>\n                            </td>\n                            <td>\n                              <div className=\"stock-info\">\n                                <span className={getStockClassName(item.stock)}>{item.stock} units</span>\n                                <div className=\"stock-progress-container\">\n                                  <div \n                                    className={`stock-progress ${getStockClassName(item.stock)}`}\n                                    style={{ width: `${Math.min(item.stock * 5, 100)}%` }}\n                                  ></div>\n                                </div>\n                              </div>\n                            </td>\n                            <td>{item.supplier}</td>\n                            <td>\n                              <button \n                                className=\"btn btn-success btn-with-icon\"\n                                onClick={() => addToCart({name: item.name, price: 19.99})}\n                                title=\"Add to order cart\"\n                              >\n                                <i className=\"fas fa-plus\"></i>\n                                Order\n                              </button>\n                            </td>\n                          </tr>\n                        ))\n                      ) : (\n                        <tr>\n                          <td colSpan=\"5\" className=\"empty-state\">No recommendations available</td>\n                        </tr>\n                      )\n                    ) : (\n                      <tr>\n                        <td colSpan=\"5\" className=\"empty-state\">Import data to see recommendations</td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"right-column\">\n            <div className=\"section-header\">\n              <i className=\"fas fa-shopping-cart\"></i>\n              <h2>Order Cart</h2>\n            </div>\n            \n            <div className=\"card\">\n              <div className=\"cart-items\">\n                {isDataLoaded && inventoryData.cartItems.length > 0 ? (\n                  inventoryData.cartItems.map((item, index) => (\n                    <div className=\"cart-item\" key={index}>\n                      <div className=\"item-details\">\n                        <h4>{item.name}</h4>\n                        <p>${item.price.toFixed(2)} per unit</p>\n                      </div>\n                      <div className=\"item-actions\">\n                        <div className=\"quantity-control\">\n                          <button \n                            className=\"quantity-btn\"\n                            onClick={() => updateCartItemQuantity(index, -1)}\n                          >\n                            <i className=\"fas fa-minus\"></i>\n                          </button>\n                          <span className=\"quantity-value\">{item.quantity}</span>\n                          <button \n                            className=\"quantity-btn\"\n                            onClick={() => updateCartItemQuantity(index, 1)}\n                          >\n                            <i className=\"fas fa-plus\"></i>\n                          </button>\n                        </div>\n                        <button \n                          className=\"btn-icon btn-danger\"\n                          onClick={() => removeCartItem(index)}\n                        >\n                          <i className=\"fas fa-trash\"></i>\n                        </button>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"empty-cart\">\n                    {isDataLoaded ? 'Your cart is empty' : 'Import data to add items to cart'}\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"cart-total\">\n                <span>Total:</span>\n                <span>${isDataLoaded ? calculateCartTotal() : '0.00'}</span>\n              </div>\n              \n              <button \n                className=\"btn btn-success btn-large btn-with-icon process-order-btn\"\n                disabled={!isDataLoaded || inventoryData.cartItems.length === 0 || isProcessing}\n                onClick={handleProcessOrder}\n              >\n                {isProcessing ? (\n                  <>\n                    <div className=\"spinner\"></div>\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-check\"></i>\n                    Process Order\n                  </>\n                )}\n              </button>\n              \n              <div className=\"savings-insights\">\n                <div className=\"saving-item\">\n                  <i className=\"fas fa-tags saving-icon\"></i>\n                  <span className=\"saving-text\">Save by ordering now</span>\n                </div>\n                <div className=\"saving-item\">\n                  <i className=\"fas fa-truck saving-icon\"></i>\n                  <span className=\"saving-text\">Free shipping on orders over $50</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <footer>\n        <p>© 2025 InventoryPro. All rights reserved.</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}